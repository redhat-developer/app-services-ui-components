{
  "already_exists": "{{name}} already exists. Try a different name",
  "bytes_size": " {{value}} bytes ",
  "bytes_to_gibibyte": "{{bytes}} bytes ({{gibibyte}} gibibyte)",
  "bytes_to_kibibytes": "{{bytes}} bytes ({{kibibytes}} kibibytes)",
  "bytes_to_mebibytes": "{{bytes}} bytes ({{mebibytes}} mebibytes)",
  "cannot_exceed_characters": "Cannot exceed 249 characters",
  "cleanup": "Cleanup",
  "cleanup_policy": "Cleanup policy",
  "cleanup_policy_description": "Cleanup policy determines whether log messages are deleted, compacted, or both. With the `compact, delete` option, log segments are first compacted and then deleted according to the retention time or size limit settings. (cleanup.policy)",
  "cleanup_section_info": "Control the cleanup processing of the log.",
  "compact": "Compact",
  "compression_type": "Compression type",
  "compression_type_description": "Compression type determines the final compression for the topic. The `producer` compression type retains the original compression set by the producer. (compression.type)",
  "core_config_info": "Before deploying your topic, we recommend entering all core configuration details.",
  "core_configuration": "Core configuration",
  "create_topic": "Create topic",
  "day": " day",
  "delete_retention_time": "Delete retention time",
  "delete_retention_time_description": "Delete retention milliseconds is the amount of time that deletion tombstone markers are retained if the topic is compacted. (delete.retention.ms)",
  "enter_name": "Enter topic name",
  "file_delete_delay": "File delete delay",
  "file_delete_delay_description": "File delete delay is the amount of time that a file is retained in the system before the file is deleted. (file.delete.delay.ms)",
  "finish": "Finish",
  "flush": "Flush",
  "flush_interval_messages": "Flush interval messages",
  "flush_interval_messages_description": "Flush interval messages is the number of messages between each data flush to the log. (flush.messages)",
  "flush_interval_time": "Flush interval time",
  "flush_interval_time_description": "Flush interval time is the amount of time between each data flush to the log. (flush.ms)",
  "flush_section_info": "Control the frequency of the flushing of the log.",
  "increase_partitions": "Increase the number of partitions?",
  "index": "Index",
  "index_interval_size": "Index interval size",
  "index_interval_size_description": "Index interval bytes is the number of bytes between each index entry to its offset index. The default setting indexes a message about every 4096 bytes. More indexing enables reads to be closer to the exact position in the log but makes the index larger. You typically do not need to change this setting. (index.interval.bytes)",
  "index_section_info": "Control the indexing of the log.",
  "invalid_name_with_dot": "Must contain at least 3 periods ( ... ) if periods are the only characters used ",
  "invalid_partitions": "A minimum of 1 and a maximum of 100 partitions are needed to create a topic",
  "jump_to_section": "JUMP TO SECTION",
  "log": "Log",
  "log_section_info": "Define how your log is handled.",
  "log_section_info_note": "Note: Messages are continually appended to the partitionâ€™s log and assigned their offset.",
  "log_segment_size": "Log segment size",
  "log_segment_size_description": "Log segment size is the size of the log segment files. Log processing actions, such as deletion and compaction, operate on log segments, so a larger setting results in fewer files but less frequent log processing. (segment.bytes)",
  "max_message_size": "Maximum message size",
  "max_message_size_description": "Maximum message bytes is the maximum record batch size. (max.message.bytes)",
  "max_message_timestamp_diff": "Maximum message timestamp difference",
  "max_message_timestamp_diff_description": "Maximum message timestamp difference is the maximum difference allowed between the timestamp specified in the message when it leaves the producer and the timestamp recorded when a broker receives the message. (message.timestamp.difference.max.ms)",
  "message_format": "Message format version",
  "message_format_description": "Message format version is the `ApiVersion` value that the broker uses to append messages to topics. This value must be a valid `ApiVersion` value, such as 0.8.2, 0.9.0.0, or 0.10.0. (message.format.version)",
  "message_retention": "Message retention",
  "message_retention_info": "How long messages are retained and the maximum total size of all log segments in a partition before they are deleted to free up space",
  "message_retention_info_note": "Messages that aren't read by a consumer within this time will be missed. By default, a limit is only applied to retention time.",
  "message_section_info": "Control how your messages will be handled in the Kafka instance.",
  "message_timestamp_type": "Message timestamp type",
  "message_timestamp_type_description": "Message timestamp type determines whether the timestamp is generated when the message is created (`CreateTime`) or when the message is appended to the log (`LogAppendTime`). (message.timestamp.type)",
  "messages": "Messages",
  "messages_time": "{{value}} messages ",
  "milliseconds_time": "{{value}} milliseconds ",
  "milliseconds_time_to_day": "{{value}} milliseconds ({{days}} day)",
  "milliseconds_to_days": "{{milliseconds}} milliseconds ({{days}} days)",
  "milliseconds_to_minute": "{{milliseconds}} milliseconds ({{minute}} minute)",
  "min_cleanable_ratio": "Minimum cleanable dirty ratio",
  "min_cleanable_ratio_description": "Minimum cleanable dirty ratio is the ratio of entries in the log that can be compacted versus entries that cannot be compacted. When this ratio is reached, the eligible messages in the log are compacted. By default, the ratio is 0.5 or 50%, meaning that messages are compacted after at least half of the log messages are eligible. This property applies only when the topic cleanup policy is set to `compact` or `compact, delete`. (min.cleanable.dirty.ratio)",
  "min_compaction_lag_time": "Minimum compaction lag time",
  "min_compaction_lag_time_description": "Minimum compaction lag time is the minimum time a message remains uncompacted in a log. This property applies only when the topic cleanup policy is set to `compact` or `compact, delete`. (min.compaction.lag.ms)",
  "min_insync_replicas": "Minimum in-sync replicas",
  "min_insync_replicas_description": "Minimum in-sync replicas is the minimum number of replicas that must acknowledge a write for the write to be considered successful. This property assumes that the producer requests acknowledgements from all replicas (`acks` set to `all`). If this minimum is not met, the producer raises an exception (`NotEnoughReplicas` or `NotEnoughReplicasAfterAppend`). Typically you create a topic with a replication factor of 3, set `min.insync.replicas` to 2, and set the producer `acks` to `all`.(min.insync.replicas)",
  "no_return": "No, return to form",
  "partition_helper_text": "One partition is sufficient for getting started, but production systems often have more.",
  "partition_info": "An ordered list of messages",
  "partition_info_note": "One or more partitions make up a topic. Partitions are distributed across the brokers to increase the scalability of your topic. You can also use them to distribute messages across the members of the consumer group.",
  "partition_warning_modal": "Since this Kafka Instance has already reached its maximum partition limit, increasing the number of partitions might result in degraded performance.",
  "partitions": "Partitions",
  "partitions_description": "Partitions are distinct lists of messages within a topic. Partitions are the main concurrency mechanism in Kafka and enable parts of a topic to be distributed over multiple brokers in the cluster.  A topic can contain one or more partitions, enabling producer and consumer loads to be scaled. The number of partitions in a topic cannot be changed once the topic is created. (num.partitions)",
  "partitions_warning": "This Kafka instance has reached its maximum partition limit and might experience degraded performance. To create more partitions, migrate to a larger Kafka instance or split your workloads across multiple instances.",
  "preallocate_log_segment_files": "Preallocate log segment files",
  "preallocate_log_segment_files_description": "Preallocate log segment files determines whether to preallocate the file on disk when creating a new log segment. This property ensures sufficient disk space for log segments. (preallocate)",
  "replicas": "Replicas",
  "replicas_description": "Replicas are copies of partitions in a topic. Partition replicas are distributed over multiple brokers in the cluster to ensure topic availability if a broker fails. When a follower replica is in sync with a partition leader, the follower replica can become the new partition leader if needed. (replication.factor)",
  "replicas_detail": "The partitions of each topic can be replicated across a configurable number of brokers.",
  "replicas_helper_text_multi_az": "",
  "replicas_helper_text_single_az": "This instance is a single broker instance. Streams for Apache Kafka only supports 1 replica and a minimum in-sync replica factor of 1 for single broker instances.",
  "replicas_info": "How many copies of a topic will be made for high availability.",
  "replication": "Replication",
  "replication_section_info": "Control the behavior of your replicas.",
  "replication_section_info_note": "Note: Each parameter impacts every replica created in this topic.",
  "retention_size": "Retention size",
  "retention_size_description": "Retention size is the maximum total size of all log segments in a partition before old log segments are deleted to free up space. By default, no retention size limit is applied, only a retention time limit. This property applies only when the topic cleanup policy is set to `delete` or `compact, delete`. (retention.bytes)",
  "retention_time": "Retention time",
  "retention_time_description": "Retention time is the amount of time that messages are retained in a topic before they are deleted. This property applies only when the topic cleanup policy is set to `delete` or `compact, delete`. (retention.ms)",
  "segement_time": "Segment time",
  "segement_time_description": "Segment time is the amount of time after which the current log segment is rolled even if the segment file is not full. This property ensures that the topic cleanup policy can delete or compact old messages as needed. (segment.ms)",
  "segment_index_size": "Segment index size",
  "segment_index_size_description": "Segment index bytes is the size of the index that maps offset to file positions. You typically do not need to change this setting. (segment.index.bytes)",
  "segment_jitter_time": "Segment jitter time",
  "segment_jitter_time_description": "Segment jitter time is the maximum delay for log segment rolling. This delay prevents bursts of log segment rolling activity. (segment.jitter.ms)",
  "select_policy": "select policy type from dropdown",
  "topic_name": "Topic name",
  "topic_name_description": "Topic name is the unique identifier for this topic within this cluster. You need this to set up your producers and consumers, so make it something memorable.",
  "topic_name_helper_text": "Must be letters (Aa-Zz), numbers, underscores ( _ ), periods ( . ), or hyphens ( - )",
  "topic_name_info": "Unique name used to recognize your topic",
  "topic_name_info_note": "The topic name is also used by your producers and consumers as part of the connection information, so make it something easy to recognize.",
  "unclean_leader_election": "Unclean leader election",
  "unclean_leader_election_description": "Unclean leader election allows a follower replica that is not in sync with the partition leader to become the leader of the partition. This property provides a way to retain at least partial data if partition leaders are jeopardized. However, this property can lead to data loss, so it's disabled by default. (unclean.leader.election.enable)",
  "wizard_title": "Create topics wizard"
}
